// Understanding the Promise questtion 2
const promise = new Promise((resolve) => {
  setTimeout(() => {
    resolve();
  }, 2000); 
});


promise.then(() => {
  console.log('Im  Ok ');
});


const Promise = new Promise((resolve, reject) => {
  setTimeout(() => {
    reject("Error are fulfiled"); 
  }, 2000);
});
promise.catch((error) => {
  console.log(`Error encountered: ${error}`); 
});

// Changing Promises
function MainData() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            console.log('Data are coming');
            resolve('Data are successfully set');
        }, 2000); // 2 seconds delay to simulate data fetching
    });
}

function processData(data) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            console.log('Our data are processing');
            resolve('Processing Complete');
        }, 1000); // 1 second delay to simulate data processing
    });
}

function saveData(processedData) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            console.log('Data saving process is ongoing');
            resolve('Data are saved');
        }, 1000); // 1 second delay to simulate data saving
    });
}

// Chaining the promises
MainData()
    .then((message) => {
        console.log(message); // Logs: Data are successfully set
        return processData(message); // Passes the data to the next function
    })
    .then((processedMessage) => {
        console.log(processedMessage); // Logs: Processing Complete
        return saveData(processedMessage); // Passes the processed data to save
    })
    .then((saveMessage) => {
        console.log(saveMessage); // Logs: Data are saved
    })
    .catch((error) => {
        console.error('Error:', error); // Logs any error that occurs in the chain
    });

// async Await
function mainnPromise () {
    return new Promise((resolve, reject) =>{
        setTimeout(() => {
            resolve('Promise resolved')
            
        }, 2000);
    });
}

async function secondPromise() {
    try {
        const result = await mainnPromise();
        console.log(result)        
    } catch (error) {
        console.error("Error:", error)  
    } 
};
secondPromise();
  




function mainnPromise () {
    return new Promise((resolve, reject) =>{
        setTimeout(() => {
            reject('Promise rejected ')
            
        }, 2000);
    });
}

async function secondPromise() {
    try {
        const result = await mainnPromise();
        console.log(result)        
    } catch (error) {
        console.error("Error:", error)  
    } 
};
secondPromise();

  
  
// Fetching Data from an API
async function fetchWeatherData() {
    try {
        const response = await fetch('https://api.weatherapi.com/v1/current.json?key=YOUR_API_KEY&q=Tripura');
        const data = await response.json();
        console.log(data)
    } catch (error) {
        console.error(`Error:`, error);
        
    };  
};
fetchWeatherData();


async function fetchWeatherData() {
    const apiKey = 'YOUR_API_KEY'; 
    const city = 'Agartala';
    try {
      const response = await fetch(`https://api.weatherapi.com/v1/current.json?key=${apiKey}&q=${city}`);
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      const data = await response.json();
      console.log('Weather Data for Tripura:', data);
    } catch (error) {
      console.error('Error fetching weather data:', error);
    }
  }
  
  fetchWeatherData();


// Concurren Promises

const Promise1 = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('First promise resolved');
    }, 1000);
  });
  
  const Promise2 = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('Second promise resolved');
    }, 2000); 
  });
  
  const promise3 = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('Third promise resolved');
    }, 3000);
  });

Promise.all([promise1, promise2, promise3])
.then((data) =>{
    console.log('All promise resolved');
    console.log(data);
})
.catch((error) => {
    console.error('Error in one of the promises:', error);
  });

const promise1 = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('Promise 1 resolved');
    }, 2000); // 2 seconds delay
  });
  
  const promise2 = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve('Promise 2 resolved');
    }, 1000); // 1 second delay
  });

  Promise.race([promise1, promise2])
    .then((value) => {
      console.log('Race winner:', value); // 'Promise 2 resolved'
    })
    .catch((error) => {
      console.error('Error in race:', error);
    });
